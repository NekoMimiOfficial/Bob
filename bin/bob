#!/usr/bin/python3

import sys
from datetime import datetime
from subprocess import getoutput
import importlib
from os.path import exists
from typing import List
import setuptools

from NekoMimi import utils as nm
from NekoMimi import colourimi as cm


__version__ = '0.0.4'
__build__ = 0x020002

# TEMPLATE SECTION:
# ~~~~~~~~~~~~~~~~~
# includes template building for python and cmake
# building templates is segmented into multiple functions

pyTemplate = """
__title__ = "DDCC"
__author__ = "NekoMimiOfficial"
__author_email__ = "nekomimi@tilde.team"
__description__ = "placeholder"
__repository__ = "https://github.com/NekoMimiOfficial/DDCC"
__bug_tracker__ = "https://github.com/NekoMimiOfficial/DDCC/issues"
__license__ = "Apache2"
__pyver__ = ">=3.11"
__target__ = "OS Independent"
__requirements__ = []

__version__ = '0.1.0'
"""

def pyTemplateBuilder():
    projectName = PWD.split("/")[-1]
    getoutput(f"bash -c 'mkdir {projectName}'")
    getoutput(f"bash -c 'cp $HOME/.local/share/Bob/templates/pymodule/* $(pwd)/'")
    nm.write(f"# {projectName}  \nPlaceholder", "./README.md")
    lice = nm.read(f"./LICENSE")
    getoutput("bash -c 'rm ./LICENSE'")
    nm.write(lice.replace("20XX", str(YEAR)), "./LICENSE")
    nm.write(pyTemplate.replace("DDCC", projectName), f"./{projectName}/__init__.py")
    getoutput("bash -c 'git init'")


class Templates:
    PYMODULE = 'pymodule'
    CMAKE = 'cmake'

    tlist = [PYMODULE, CMAKE]

# END OF TEMPLATE SECTION
# ~~~~~~~~~~~~~~~~~~~~~~~


# BUILDING SECTION:
# ~~~~~~~~~~~~~~~~~
# This section includes functions for building the projects
# Each build type is segmented into multiple functions

class BuildTypes:
    PYMODULE = 'PyModule'

    blist = [PYMODULE]

def pybuild(data: List[str]):
    "[!!!] WHY TF IS THE LOADING NOT WORKING"
    "Leaving this for the next person (me) who wishes"
    "to try and fix this routine as a warning"
    "Numbers of hours wasted: 4"
    sys.path.append(".")
    "HOLY SHTICK!!! IT WORKS!!!"

    sys.argv = ['bob', 'bdist_wheel']
    init = importlib.import_module(data["src"].split("/")[1]) #type: ignore
    
    PLHPVER = init.__pyver__.split("=", 1)[1].split(".", 1)[0]
    PLHLICENSE = init.__license__
    PLHAUTH = init.__author__
    PLHMAIL = init.__author_email__
    PLHREP = init.__repository__
    PLHVER = init.__version__
    PLHSRCF = data["src"].split("/", 1)[1] #type: ignore
    PLHPVERVERB = init.__pyver__
    PLHBUG = init.__bug_tracker__
    PLHDES = init.__description__
    PLHNAME = PLHSRCF.split("/")[0]
    PLHTARGET = init.__target__
    PLHINSREQ = init.__requirements__
    README = nm.read("README.md")

    setuptools.setup(
        name= PLHNAME,
        version= PLHVER,
        author= PLHAUTH, 
        author_email= PLHMAIL, 
        description= PLHDES, 
        long_description= README, 
        long_description_content_type="text/markdown", 
        url= PLHREP, 
        project_urls={ "Bug Tracker" : PLHBUG },
        classifiers=[
            f"Programming Language :: Python :: {PLHPVER}", 
            f"License :: OSI Approved :: {PLHLICENSE}", 
            f"Operating System :: {PLHTARGET}"
        ],
        package_dir= {"./": PLHSRCF}, 
        install_requires= PLHINSREQ, 
        packages= setuptools.find_packages(), 
        python_requires= PLHPVERVERB
    )

    kprint("Python Wheel Build Successful!", Pallet.catGreen)
    exit(0)

# END OF BUILDING SECTION
# ~~~~~~~~~~~~~~~~~~~~~~~

# CLASSES AND DATATYPES:
# ~~~~~~~~~~~~~~~~~~~~~~

class Tokens:
    class BuildType:
        def __init__(self, btype, l) -> None:
            self.data = btype
            self.line = l
        def __repr__(self) -> str:
            return 'BUILDTYPE'

    class BuildSrc:
        def __init__(self, src, l) -> None:
            self.data = src
            self.line = l
        def __repr__(self) -> str:
            return 'BUILDSRC'

    class BUILD:
        def run(self, build: str, data: List[str]):
            kprint("Building..."+ str(build)+ str(data), Pallet.catBlue)
            if build == BuildTypes.PYMODULE:
                pybuild(data)

        def __repr__(self) -> str:
            return '@BUILD'

    class TestSrc:
        def __init__(self, src, l) -> None:
            self.data = src
            self.line = l
        def __repr__(self) -> str:
            return 'TESTSRC'

    class TEST:
        def run(self, build: str, data: List[str]):
            print("Testing...", build, data)
        def __repr__(self) -> str:
            return "@TEST"

    TOKENS = ['buildType', 'buildSrc', 'BUILD', 'testSrc', 'TEST']

class Pallet:
    smallFG = "#888888"
    mochaBG = "#1E1E2E"
    mochaFG = "#CDD6F4"
    catBlue = "#799DDB"
    catRed = "#F38BA8"
    catCyan = "#89DCEB"
    catPink = "#F5C2E7"
    catYellow = "#F9E2AF"
    catOrange = "#F3B993"
    catGreen = "#A2DCAA"
    catPurr = "#C6A1F0"

class ERR_LOC:
    @staticmethod
    def msg(errCode: int, line: int, column: int, lexemes: str) -> str:
        l = line
        c = column
        x = lexemes
        msg: str = f"Internal Error\nNo match found for the error code {errCode}"
        match errCode:
            case 0xF6:
                msg = f"EOL without getting params\nLine: {l+1} has ended without reaching a param\nLine: '{x[l]}'"

            case 0x24:
                msg = f"Unmatched param bracket\nLine: {l+1} has ended without reaching a param close bracket '>'\nLine: '{x[l]}'"

            case 0xF9:
                msg = f"Typo found on line: {l+1}, col: {len(lexemes[l].split(' ', 1)) + 3}\nMissing \"space\" after variable name\nVariable syntax: $name <value>"
            case 0xFA:
                msg = f"Typo found on line: {l+1}, col: {len(lexemes[l].split(' ', 1)) + 4}\nMissing '<' after variable name\nVariable syntax: $name <value>"
            case 0xF7:
                msg = f"Variable value assign error\nNo value found for variable: {name}, enclosed by '<' and '>'\nLine: {l+1}, \"{lexemes[l]}\""

        return msg

# VARIABLES:
# ~~~~~~~~~~

YEAR = datetime.now().year
PWD = getoutput("bash -c pwd")
HOME = getoutput("bash -c echo $HOME")
TEMPATH = f"{HOME}/.local/share/Bob/templates"
factory = cm.colourFactory()
face = """ ^ ^  | Bob the build system  v<TMP> |
=UwU= | > http://nekomimi.tilde.team |
 w w  | NekoMimi @ NekoLabs LLC 2024 |
""".replace("<TMP>", __version__)
help_msg = """Bob's blueprint:

-h          : shows this help message
-t <type>   : creates a template file
              supports::[pymodule, c++]
"""

# FUNCTIONS AND METHODS:
# ~~~~~~~~~~~~~~~~~~~~~~

def kprint(text, col=Pallet.mochaFG): #custom neko created kolor print function
    factory.text = text
    factory.colour = col
    factory.cinit()
    factory.cprint()
    return

def error(errmsg:str , ercode: str, excode: int): #unified error msg generator
    kprint("PARSE ERROR:", Pallet.catRed)
    kprint("~~~~~~~~~~~~", Pallet.catRed)
    print('')
    kprint(errmsg, Pallet.catOrange)
    kprint("Contact Neko for broken build file support", Pallet.catYellow)
    kprint(f"Err {ercode}", Pallet.catRed)
    exit(excode)

def safe_enc(l, c, x): #safely increments to the next character (c) on line (l) for a list of lines aka lexemes (x) errors pn EOL
    if len(x[l]) <= (c+1):
        error(ERR_LOC.msg(0xF6, l, c, x), "0xF6", 6)
    else:
        return (c+1)

def p_safe_enc(l, c, x): #same as safe_enc but errors on a non matched bracket
    if len(x[l]) <= (c+1):
        error(ERR_LOC.msg(0x24, l, c, x), "0x24", 6)
    else:
        return (c+1)

def Lexer(lexemes):
    """
    Dear contributor, thanks for taking the time to read this
    amazing method however I should state that when I wrote this
    only God and I knew how this lexer worked, now only God knows it
    Leaving this counter as a warning for the next person who tries
    to improve this routine, 
    TOTAL_HOURS_WASTED= 1;
    """
    tokens = []
    variables = {}
    #lexe each line
    l = 0
    while True:
        #lexe each char
        c = 0
        word = ''
        while True: #second loop is for generating words
            if lexemes[l] == '':
                break
            getC = lexemes[l][c]
            # print(lexemes[l], c, [getC])
            if c == 0:
                if getC not in ('@', '$'):
                    c = 0
                    word = ''
                    break
                else:
                    if len(lexemes[l]) <= 1:
                        break
                    c += 1
                    if getC == '$':
                        if " " in lexemes[l]:
                            if not lexemes[l].split(" ", 1)[1].startswith("<"):
                                if '<' in lexemes[l].split(" ", 1)[0]:
                                    error(ERR_LOC.msg(0xF9, l, c, lexemes), "0xF9", 9)
                                error(ERR_LOC.msg(0xFA, l, c, lexemes), "0xFA", 10)
                            split = lexemes[l].split(" ", 1)
                            name = split[0].removeprefix("$")
                            if not '<' in split[1] or not '>' in split[1]:
                                error(ERR_LOC.msg(0xF7, l, c, lexemes), "0xF7", 7)
                            value = split[1].removeprefix("<").removesuffix(">")
                            variables[name] = value
                            break
                        else:
                            error(f"Variable assignment terminated without value\nNo value assigned to variable on line: {l+1}\nline: \"{lexemes[l]}\"\nVariable syntax: $name <value>", "0xF8", 8)
                    continue

            if word in Tokens.TOKENS and lexemes[l][c] == ' ':
                tok = word
                word = ''
                c = safe_enc(l, c, lexemes)
                getC = lexemes[l][c]
                if getC == '<':
                    c = p_safe_enc(l, c, lexemes)
                    param = ''
                    while True:
                        getC = lexemes[l][c]
                        if getC == '>':
                            break
                        param += getC
                        c = p_safe_enc(l, c, lexemes)

                    if tok == 'buildType':
                        tokens.append(Tokens.BuildType(param, l+1))
                        break

                    elif tok == 'buildSrc':
                        tokens.append(Tokens.BuildSrc(param, l+1))
                        break

                    elif tok == 'testSrc':
                        tokens.append(Tokens.TestSrc(param, l+1))
                        break

                else:
                    error(f"Missing parameter for token: '{tok}'\nEnsure starting param bracket '<' must be found on line: {l+1}, col: {c}", "0xF4", 4)


            if not getC == " ":
                word += getC
            else:
                error(f"line: {l+1}, col: 2-{c}, [unknown token '{word}']\navailable tokens: {Tokens.TOKENS}", "0xF2", 2)
            
            if word == "BUILD":
                tokens.append(Tokens.BUILD())
                tokens.append('x')
                break
            if word == "TEST":
                tokens.append(Tokens.TEST())
                break

            if len(lexemes[l]) < c+2: #type: ignore
                error(f"EOL without finding a suitable token\nNo token found on line: {l+1}\ncontents: '{lexemes[l]}'\nSupported tokens: {Tokens.TOKENS}", "0xF5", 5)
            c += 1 #type: ignore

        if len(lexemes) < l+2:
            if not 'x' in tokens:
                error(f"Out of file length\nThe file ended without a complete build instruction set\nEOF line: {l}", "0xF3", 3)
            else:
                u = 0
                for _ in tokens:
                    if _ == 'x':
                        tokens.pop(u)
                    u += 1
                return (tokens, variables)

        l += 1

def refactor(var, tok, vli):
    if var.startswith('$'):
        if not ' ' in var:
            varname = var.removeprefix('$')
            if varname in vli:
                return vli[varname]
            else:
                error(f"No variable found called: {varname}, on line: {tok.line}", "0xFC", 12)
        else:
            error(f"Assignment syntax error\nVariable names can not contain spaces\nFound on line: {tok.line}", "0xFD", 13)
    else:
        return var

def runScript():
    script = nm.read('./bob.build')
    lexemes = script.split("\n")
    tokens, vars = Lexer(lexemes)
    build = "NONE"
    data = { 'src' : 'NONE', 'test' : 'NONE' }
    for token in tokens:
        if getattr(token, 'run', 'NI') == 'NI':
            if token.__repr__() == 'BUILDTYPE':
                build = token.data
                build = refactor(build, token, vars)
                if not build in BuildTypes.blist:
                    error(f"Unknown build type\nUnsupported build type: {build}, on line: {token.line}\nSupported build types: {BuildTypes.blist}", "0xFE", 14)
            elif token.__repr__() == 'BUILDSRC':
                data['src'] = token.data
                data['src'] = refactor(data['src'], token, vars) #type: ignore
                if not exists(data["src"]): #type: ignore
                    error(f"Directory not found\nPlease make sure that '{data['src']}' exists\nBuild source directory on line: {token.line}", "0xD1", 15)
            elif token.__repr__() == 'TESTSRC':
                data['test'] = token.data
                data['test'] = refactor(data['test'], token, vars) #type: ignore
                if not exists(data["test"]): #type: ignore
                    error(f"Directory not found\nPlease make sure that '{data['test']}' exists\nBuild source directory on line: {token.line}", "0xD2", 16)

            else:
                error("Internal post-lexer error", "0xFB", 11)

        else:
            if token.__repr__() == "@BUILD":
                if build == 'NONE':
                    error("No build type configured", "0xD3", 17)
                if data["src"] == 'NONE':
                    error("No build source configured", "0xD4", 18)

            elif token.__repr__() == "@TEST":
                if data["test"] == 'NONE':
                    error("No test source configured", "0xD5", 19)
                if build == 'NONE':
                    error("No build type configured", "0xD6", 20)

            token.run(build, data)

def templateBuilder(temptype):
    if temptype == Templates.PYMODULE:
        pyTemplateBuilder()

def mainProc():
    kprint(nm.figlet("Bob"), Pallet.mochaFG)
    kprint(face, Pallet.smallFG)
    if "-h" in sys.argv or "--help" in sys.argv:
        kprint(help_msg, Pallet.catYellow)

    elif '-t' in sys.argv:
        if not len(sys.argv) == 3:
            kprint("Too many arguments passed", Pallet.catRed)
            kprint("run bob -h for more help", Pallet.catRed)
            exit(1)
        if sys.argv[2] not in Templates.tlist:
            kprint("Invalid template option", Pallet.catRed)
            kprint("run bob -h for more help", Pallet.catRed)
            exit(1)
        templateBuilder(sys.argv[2])

    elif exists("./bob.build"):
        runScript()

    else:
        kprint("No suitable operation found", Pallet.catRed)
        kprint("run bob -h for more help", Pallet.catRed)

if __name__ == "__main__":
    mainProc()
