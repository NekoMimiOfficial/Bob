#!/usr/bin/python3

import sys
import re
from datetime import datetime
from subprocess import getoutput
import importlib
from os.path import exists
from typing import List
import setuptools
from pyfiglet import Figlet
from io import TextIOWrapper

class NekoMimi:
    def __init__(self):
        pass

    def figlet(self, text: str, font: str = "small", width: int = 80) -> str:
        """
        simple function for the pyfiglet rendering class
        @arg text: a string of text used by figlet
        @kwarg font: a string containing any figlet font(default:smal)
        @kwarg width: an integer describing the width of the generation
        @return: a string being the render
        >>> NekoMimi.utils.figlet("nya")
        *nya but generated as a figlet string (font:small, width: 80)
        """
        engine = Figlet(font, width=width)
        render: str = engine.renderText(text)
        return render

    def write(self, data: str, file: str) -> bool:
        """
        single line write command
        @arg data: string containing data to be written
        @arg file: string containing file to be written to
        @return: False on fail, True on success
        >>> NekoMimi.utils.write("some data", "./some_file.ext")
        True
        """
        try:
            buffer: TextIOWrapper = open(file, "w")
            buffer.write(data)
            buffer.close()

            return True

        except FileNotFoundError:
            print("the file requested \"{file}\" does nt exist")

            return False

        except Exception as e:
            print(e)
            del e

            return False


    def read(self, file: str) -> str:
        """
        single line read command
        @arg file: string containing file to read
        @return: file on fail, contents on success
        """
        try:
            buffer = open(file, "r")

        except FileNotFoundError:
            print(f"the file requested \"{file}\" does not exist")

            return file

        except Exception as e:
            print(e)
            del e

            return file

        content: str = buffer.read()
        buffer.close()

        return content

class Colourimi:
    def __init__(self):
        self.CLUT = [  # color look-up table
#    8-bit, RGB hex

            # Primary 3-bit (8 colors). Unique representation!
            ('00',  '000000'),
            ('01',  '800000'),
            ('02',  '008000'),
            ('03',  '808000'),
            ('04',  '000080'),
            ('05',  '800080'),
            ('06',  '008080'),
            ('07',  'c0c0c0'),

            # Equivalent "bright" versions of original 8 colors.
            ('08',  '808080'),
            ('09',  'ff0000'),
            ('10',  '00ff00'),
            ('11',  'ffff00'),
            ('12',  '0000ff'),
            ('13',  'ff00ff'),
            ('14',  '00ffff'),
            ('15',  'ffffff'),

            # Strictly ascending.
            ('16',  '000000'),
            ('17',  '00005f'),
            ('18',  '000087'),
            ('19',  '0000af'),
            ('20',  '0000d7'),
            ('21',  '0000ff'),
            ('22',  '005f00'),
            ('23',  '005f5f'),
            ('24',  '005f87'),
            ('25',  '005faf'),
            ('26',  '005fd7'),
            ('27',  '005fff'),
            ('28',  '008700'),
            ('29',  '00875f'),
            ('30',  '008787'),
            ('31',  '0087af'),
            ('32',  '0087d7'),
            ('33',  '0087ff'),
            ('34',  '00af00'),
            ('35',  '00af5f'),
            ('36',  '00af87'),
            ('37',  '00afaf'),
            ('38',  '00afd7'),
            ('39',  '00afff'),
            ('40',  '00d700'),
            ('41',  '00d75f'),
            ('42',  '00d787'),
            ('43',  '00d7af'),
            ('44',  '00d7d7'),
            ('45',  '00d7ff'),
            ('46',  '00ff00'),
            ('47',  '00ff5f'),
            ('48',  '00ff87'),
            ('49',  '00ffaf'),
            ('50',  '00ffd7'),
            ('51',  '00ffff'),
            ('52',  '5f0000'),
            ('53',  '5f005f'),
            ('54',  '5f0087'),
            ('55',  '5f00af'),
            ('56',  '5f00d7'),
            ('57',  '5f00ff'),
            ('58',  '5f5f00'),
            ('59',  '5f5f5f'),
            ('60',  '5f5f87'),
            ('61',  '5f5faf'),
            ('62',  '5f5fd7'),
            ('63',  '5f5fff'),
            ('64',  '5f8700'),
            ('65',  '5f875f'),
            ('66',  '5f8787'),
            ('67',  '5f87af'),
            ('68',  '5f87d7'),
            ('69',  '5f87ff'),
            ('70',  '5faf00'),
            ('71',  '5faf5f'),
            ('72',  '5faf87'),
            ('73',  '5fafaf'),
            ('74',  '5fafd7'),
            ('75',  '5fafff'),
            ('76',  '5fd700'),
            ('77',  '5fd75f'),
            ('78',  '5fd787'),
            ('79',  '5fd7af'),
            ('80',  '5fd7d7'),
            ('81',  '5fd7ff'),
            ('82',  '5fff00'),
            ('83',  '5fff5f'),
            ('84',  '5fff87'),
            ('85',  '5fffaf'),
            ('86',  '5fffd7'),
            ('87',  '5fffff'),
            ('88',  '870000'),
            ('89',  '87005f'),
            ('90',  '870087'),
            ('91',  '8700af'),
            ('92',  '8700d7'),
            ('93',  '8700ff'),
            ('94',  '875f00'),
            ('95',  '875f5f'),
            ('96',  '875f87'),
            ('97',  '875faf'),
            ('98',  '875fd7'),
            ('99',  '875fff'),
            ('100', '878700'),
            ('101', '87875f'),
            ('102', '878787'),
            ('103', '8787af'),
            ('104', '8787d7'),
            ('105', '8787ff'),
            ('106', '87af00'),
            ('107', '87af5f'),
            ('108', '87af87'),
            ('109', '87afaf'),
            ('110', '87afd7'),
            ('111', '87afff'),
            ('112', '87d700'),
            ('113', '87d75f'),
            ('114', '87d787'),
            ('115', '87d7af'),
            ('116', '87d7d7'),
            ('117', '87d7ff'),
            ('118', '87ff00'),
            ('119', '87ff5f'),
            ('120', '87ff87'),
            ('121', '87ffaf'),
            ('122', '87ffd7'),
            ('123', '87ffff'),
            ('124', 'af0000'),
            ('125', 'af005f'),
            ('126', 'af0087'),
            ('127', 'af00af'),
            ('128', 'af00d7'),
            ('129', 'af00ff'),
            ('130', 'af5f00'),
            ('131', 'af5f5f'),
            ('132', 'af5f87'),
            ('133', 'af5faf'),
            ('134', 'af5fd7'),
            ('135', 'af5fff'),
            ('136', 'af8700'),
            ('137', 'af875f'),
            ('138', 'af8787'),
            ('139', 'af87af'),
            ('140', 'af87d7'),
            ('141', 'af87ff'),
            ('142', 'afaf00'),
            ('143', 'afaf5f'),
            ('144', 'afaf87'),
            ('145', 'afafaf'),
            ('146', 'afafd7'),
            ('147', 'afafff'),
            ('148', 'afd700'),
            ('149', 'afd75f'),
            ('150', 'afd787'),
            ('151', 'afd7af'),
            ('152', 'afd7d7'),
            ('153', 'afd7ff'),
            ('154', 'afff00'),
            ('155', 'afff5f'),
            ('156', 'afff87'),
            ('157', 'afffaf'),
            ('158', 'afffd7'),
            ('159', 'afffff'),
            ('160', 'd70000'),
            ('161', 'd7005f'),
            ('162', 'd70087'),
            ('163', 'd700af'),
            ('164', 'd700d7'),
            ('165', 'd700ff'),
            ('166', 'd75f00'),
            ('167', 'd75f5f'),
            ('168', 'd75f87'),
            ('169', 'd75faf'),
            ('170', 'd75fd7'),
            ('171', 'd75fff'),
            ('172', 'd78700'),
            ('173', 'd7875f'),
            ('174', 'd78787'),
            ('175', 'd787af'),
            ('176', 'd787d7'),
            ('177', 'd787ff'),
            ('178', 'd7af00'),
            ('179', 'd7af5f'),
            ('180', 'd7af87'),
            ('181', 'd7afaf'),
            ('182', 'd7afd7'),
            ('183', 'd7afff'),
            ('184', 'd7d700'),
            ('185', 'd7d75f'),
            ('186', 'd7d787'),
            ('187', 'd7d7af'),
            ('188', 'd7d7d7'),
            ('189', 'd7d7ff'),
            ('190', 'd7ff00'),
            ('191', 'd7ff5f'),
            ('192', 'd7ff87'),
            ('193', 'd7ffaf'),
            ('194', 'd7ffd7'),
            ('195', 'd7ffff'),
            ('196', 'ff0000'),
            ('197', 'ff005f'),
            ('198', 'ff0087'),
            ('199', 'ff00af'),
            ('200', 'ff00d7'),
            ('201', 'ff00ff'),
            ('202', 'ff5f00'),
            ('203', 'ff5f5f'),
            ('204', 'ff5f87'),
            ('205', 'ff5faf'),
            ('206', 'ff5fd7'),
            ('207', 'ff5fff'),
            ('208', 'ff8700'),
            ('209', 'ff875f'),
            ('210', 'ff8787'),
            ('211', 'ff87af'),
            ('212', 'ff87d7'),
            ('213', 'ff87ff'),
            ('214', 'ffaf00'),
            ('215', 'ffaf5f'),
            ('216', 'ffaf87'),
            ('217', 'ffafaf'),
            ('218', 'ffafd7'),
            ('219', 'ffafff'),
            ('220', 'ffd700'),
            ('221', 'ffd75f'),
            ('222', 'ffd787'),
            ('223', 'ffd7af'),
            ('224', 'ffd7d7'),
            ('225', 'ffd7ff'),
            ('226', 'ffff00'),
            ('227', 'ffff5f'),
            ('228', 'ffff87'),
            ('229', 'ffffaf'),
            ('230', 'ffffd7'),
            ('231', 'ffffff'),

            # Gray-scale range.
            ('232', '080808'),
            ('233', '121212'),
            ('234', '1c1c1c'),
            ('235', '262626'),
            ('236', '303030'),
            ('237', '3a3a3a'),
            ('238', '444444'),
            ('239', '4e4e4e'),
            ('240', '585858'),
            ('241', '626262'),
            ('242', '6c6c6c'),
            ('243', '767676'),
            ('244', '808080'),
            ('245', '8a8a8a'),
            ('246', '949494'),
            ('247', '9e9e9e'),
            ('248', 'a8a8a8'),
            ('249', 'b2b2b2'),
            ('250', 'bcbcbc'),
            ('251', 'c6c6c6'),
            ('252', 'd0d0d0'),
            ('253', 'dadada'),
            ('254', 'e4e4e4'),
            ('255', 'eeeeee'),
        ]
        self.RGB2SHORT_DICT, self.SHORT2RGB_DICT = self._create_dicts()

    def _strip_hash(self, rgb:str) -> str:
        # Strip leading `#` if exists.
        if rgb.startswith('#'):
            rgb = rgb.lstrip('#')
        return rgb

    def _create_dicts(self):
        short2rgb_dict = dict(self.CLUT)
        rgb2short_dict = {}
        for k, v in short2rgb_dict.items():
            rgb2short_dict[v] = k
        return rgb2short_dict, short2rgb_dict

    def short2rgb(self, short:str):
        return self.SHORT2RGB_DICT[short]

# def print_all():
#     """ Print all 256 xterm color codes.
#     """
#     for short, rgb in CLUT:
#         sys.stdout.write('\033[48;5;%sm%s:%s' % (short, short, rgb))
#         sys.stdout.write("\033[0m  ")
#         sys.stdout.write('\033[38;5;%sm%s:%s' % (short, short, rgb))
#         sys.stdout.write("\033[0m\n")
#     print ("Printed all codes.")
#     print ("You can translate a hex or 0-255 code by providing an argument.")

    def rgb2short(self, rgb):
        """ Find the closest xterm-256 approximation to the given RGB value.
        @param rgb: Hex code representing an RGB value, eg, 'abcdef'
        @returns: String between 0 and 255, compatible with xterm.
        >>> rgb2short('123456')
        ('23', '005f5f')
        >>> rgb2short('ffffff')
        ('231', 'ffffff')
        >>> rgb2short('0DADD6') # vimeo logo
        ('38', '00afd7')
        """
        rgb = self._strip_hash(rgb)
        incs = (0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff)
        # Break 6-char RGB code into 3 integer vals.
        parts = [ int(h, 16) for h in re.split(r'(..)(..)(..)', rgb)[1:4] ]
        res = []
        for part in parts:
            i = 0
            while i < len(incs)-1:
                s, b = incs[i], incs[i+1]  # smaller, bigger
                if s <= part <= b:
                    s1 = abs(s - part)
                    b1 = abs(b - part)
                    if s1 < b1: closest = s
                    else: closest = b
                    res.append(closest)
                    break
                i += 1
        #print '***', res
        res = ''.join([ ('%02.x' % i) for i in res ])
        equiv = self.RGB2SHORT_DICT[ res ]
        #print '***', res, equiv
        return equiv


#---------------------------------------------------------------------

    def _printCC(self, text:str, arg:str, newline:bool=True):
        prefix:str = ""
        suffix:str = ""
        if len(arg) < 4 and int(arg) < 256:
            prefix = '\033[38;5;%sm%s\033[0m'% (arg, text)
            if newline == True:
                suffix = "\n"
        else:
            short = self.rgb2short(arg)
            prefix = '\033[38;5;%sm%s\033[0m'% (short, text)
            if newline == True:
                suffix = "\n"

        return prefix, suffix

    class colourFactory():

        """ colour constructor and applying class
            initialize once
            >>> factory = colourFactory()
            >>> factory.text = 'test' #possible objects: text, colour, newline
            >>> factory.cinit() #sets prefix and suffix which can be changed manually
            >>> factory.cprint() #prints text between prefix and suffix
            test (default color: #ff0088)

            @param class.text: text to be written
            @param class.colour: colour of text
            @param classs.newline: (bool) to print a newline at end
            @param class.prefix: gets set to the color prefix on class.cinit()
            @param class.suffix: gets set to terminator and newline on class.cinit()
            @result: class object

            functions:
                cinit() for color initialization
                cprint() fo rprinting the initialized text
        """

        text:str = "Sample Text"
        colour:str = "ff0088"
        newline:bool = True
        prefix:str = ""
        suffix:str = ""

        def __init__(self, pself):
            self.pself = pself

        def cinit(self) -> None:
            """
            colour initilizor, call before cprint()
            """
            self.prefix, self.suffix =self.pself._printCC(self.text, self.colour, self.newline)
            return

        def cprint(self) -> None:
            """
            simply prints the initialized text
            """
            sys.stdout.write(self.prefix)
            sys.stdout.write(self.suffix)
            return

nm = NekoMimi()
cmb = Colourimi()
cm = cmb.colourFactory(cmb)

__version__ = '0.0.4'
__build__ = 0x020004

# TEMPLATE SECTION:
# ~~~~~~~~~~~~~~~~~
# includes template building for python and cmake
# building templates is segmented into multiple functions

pyTemplate = """
__title__ = "DDCC"
__author__ = "NekoMimiOfficial"
__author_email__ = "nekomimi@tilde.team"
__description__ = "placeholder"
__repository__ = "https://github.com/NekoMimiOfficial/DDCC"
__bug_tracker__ = "https://github.com/NekoMimiOfficial/DDCC/issues"
__license__ = "Apache2"
__pyver__ = ">=3.11"
__target__ = "OS Independent"
__requirements__ = []

__version__ = '0.1.0'
"""

def pyTemplateBuilder():
    projectName = PWD.split("/")[-1]
    getoutput(f"bash -c 'mkdir {projectName}'")
    getoutput(f"bash -c 'cp $HOME/.local/share/Bob/templates/pymodule/* $(pwd)/'")
    nm.write(f"# {projectName}  \nPlaceholder", "./README.md")
    lice = nm.read(f"./LICENSE")
    getoutput("bash -c 'rm ./LICENSE'")
    nm.write(lice.replace("20XX", str(YEAR)), "./LICENSE")
    nm.write(pyTemplate.replace("DDCC", projectName), f"./{projectName}/__init__.py")
    getoutput("bash -c 'git init'")


class Templates:
    PYMODULE = 'pymodule'
    CMAKE = 'cmake'

    tlist = [PYMODULE, CMAKE]

# END OF TEMPLATE SECTION
# ~~~~~~~~~~~~~~~~~~~~~~~


# BUILDING SECTION:
# ~~~~~~~~~~~~~~~~~
# This section includes functions for building the projects
# Each build type is segmented into multiple functions

class BuildTypes:
    PYMODULE = 'PyModule'

    blist = [PYMODULE]

def pybuild(data: List[str]):
    "[!!!] WHY TF IS THE LOADING NOT WORKING"
    "Leaving this for the next person (me) who wishes"
    "to try and fix this routine as a warning"
    "Numbers of hours wasted: 4"
    sys.path.append(".")
    "HOLY SHTICK!!! IT WORKS!!!"

    sys.argv = ['bob', 'bdist_wheel']
    init = importlib.import_module(data["src"].split("/")[1]) #type: ignore
    
    PLHPVER = init.__pyver__.split("=", 1)[1].split(".", 1)[0]
    PLHLICENSE = init.__license__
    PLHAUTH = init.__author__
    PLHMAIL = init.__author_email__
    PLHREP = init.__repository__
    PLHVER = init.__version__
    PLHSRCF = data["src"].split("/", 1)[1] #type: ignore
    PLHPVERVERB = init.__pyver__
    PLHBUG = init.__bug_tracker__
    PLHDES = init.__description__
    PLHNAME = PLHSRCF.split("/")[0]
    PLHTARGET = init.__target__
    PLHINSREQ = init.__requirements__
    README = nm.read("README.md")

    setuptools.setup(
        name= PLHNAME,
        version= PLHVER,
        author= PLHAUTH, 
        author_email= PLHMAIL, 
        description= PLHDES, 
        long_description= README, 
        long_description_content_type="text/markdown", 
        url= PLHREP, 
        project_urls={ "Bug Tracker" : PLHBUG },
        classifiers=[
            f"Programming Language :: Python :: {PLHPVER}", 
            f"License :: OSI Approved :: {PLHLICENSE}", 
            f"Operating System :: {PLHTARGET}"
        ],
        package_dir= {"./": PLHSRCF}, 
        install_requires= PLHINSREQ, 
        packages= setuptools.find_packages(), 
        python_requires= PLHPVERVERB
    )

    kprint("Python Wheel Build Successful!", Pallet.catGreen)
    exit(0)

# END OF BUILDING SECTION
# ~~~~~~~~~~~~~~~~~~~~~~~

# CLASSES AND DATATYPES:
# ~~~~~~~~~~~~~~~~~~~~~~

class Tokens:
    class BuildType:
        def __init__(self, btype, l) -> None:
            self.data = btype
            self.line = l
        def __repr__(self) -> str:
            return 'BUILDTYPE'

    class BuildSrc:
        def __init__(self, src, l) -> None:
            self.data = src
            self.line = l
        def __repr__(self) -> str:
            return 'BUILDSRC'

    class BUILD:
        def run(self, build: str, data: List[str]):
            kprint("Building..."+ str(build)+ str(data), Pallet.catBlue)
            if build == BuildTypes.PYMODULE:
                pybuild(data)

        def __repr__(self) -> str:
            return '@BUILD'

    class TestSrc:
        def __init__(self, src, l) -> None:
            self.data = src
            self.line = l
        def __repr__(self) -> str:
            return 'TESTSRC'

    class TEST:
        def run(self, build: str, data: List[str]):
            print("Testing...", build, data)
        def __repr__(self) -> str:
            return "@TEST"

    TOKENS = ['buildType', 'buildSrc', 'BUILD', 'testSrc', 'TEST']

class Pallet:
    smallFG = "#888888"
    mochaBG = "#1E1E2E"
    mochaFG = "#CDD6F4"
    catBlue = "#799DDB"
    catRed = "#F38BA8"
    catCyan = "#89DCEB"
    catPink = "#F5C2E7"
    catYellow = "#F9E2AF"
    catOrange = "#F3B993"
    catGreen = "#A2DCAA"
    catPurr = "#C6A1F0"

class ERR_LOC:
    @staticmethod
    def msg(errCode: int, line: int, column: int, lexemes: str, additional_data: List[str]= []) -> str:
        l = line
        c = column
        x = lexemes
        msg: str = f"Internal locale error\nNo match found for the error code {errCode}"
        match errCode:
            case 0xF6:
                msg = f"EOL without getting params\nLine: {l+1} has ended without reaching a param\nLine: '{x[l]}'"

            case 0x24:
                msg = f"Unmatched param bracket\nLine: {l+1} has ended without reaching a param close bracket '>'\nLine: '{x[l]}'"

            case 0xF9:
                msg = f"Typo found on line: {l+1}, col: {len(lexemes[l].split(' ', 1)) + 3}\nMissing \"space\" after variable name\nVariable syntax: $name <value>"
            
            case 0xFA:
                msg = f"Typo found on line: {l+1}, col: {len(lexemes[l].split(' ', 1)) + 4}\nMissing '<' after variable name\nVariable syntax: $name <value>"

            case 0xF7:
                msg = f"Variable value assign error\nNo value found for variable: {additional_data[0]}, enclosed by '<' and '>'\nLine: {l+1}, \"{lexemes[l]}\""

            case 0xF8:
                msg = f"Variable assignment terminated without value\nNo value assigned to variable on line: {l+1}\nline: \"{lexemes[l]}\"\nVariable syntax: $name <value>"

            case 0xF4:
                msg = f"Missing parameter for token: '{additional_data[0]}'\nEnsure starting param bracket '<' must be found on line: {l+1}, col: {c}"

            case 0xF2:
                msg = f"line: {l+1}, col: 2-{c}, [unknown token '{additional_data[0]}']\navailable tokens: {Tokens.TOKENS}"

            case 0xF5:
                msg = f"EOL without finding a suitable token\nNo token found on line: {l+1}\ncontents: '{lexemes[l]}'\nSupported tokens: {Tokens.TOKENS}"

            case 0xF3:
                msg = f"Out of file length\nThe file ended without a complete build instruction set\nEOF line: {l}"

            case 0xFC:
                msg = f"No variable found called: {additional_data[0]}, on line: {additional_data[1]}"

            case 0xFD:
                msg = f"Assignment syntax error\nVariable names can not contain spaces\nFound on line: {additional_data[0]}"

            case 0xFE:
                msg = f"Unknown build type\nUnsupported build type: {additional_data[0]}, on line: {additional_data[1]}\nSupported build types: {BuildTypes.blist}"

            case 0xD1:
                msg = f"Directory not found\nPlease make sure that '{additional_data[0]}' exists\nBuild source directory on line: {additional_data[1]}"

            case 0xD2:
                msg = f"Directory not found\nPlease make sure that '{additional_data[0]}' exists\nBuild source directory on line: {additional_data[1]}"

            case 0xFB:
                msg = "Internal post-lexer error"

            case 0xD3:
                msg = "No build type configured"

            case 0xD4:
                msg = "No build source configured"

            case 0xD5:
                msg = "No test source configured"

        return msg

# VARIABLES:
# ~~~~~~~~~~

YEAR = datetime.now().year
PWD = getoutput("bash -c pwd")
HOME = getoutput("bash -c echo $HOME")
TEMPATH = f"{HOME}/.local/share/Bob/templates"
factory = cm
face = """ ^ ^  | Bob the build system  v<TMP> |
=UwU= | > http://nekomimi.tilde.team |
 w w  | NekoMimi @ NekoLabs LLC 2024 |
""".replace("<TMP>", __version__)
help_msg = """Bob's blueprint:

-h          : shows this help message
-t <type>   : creates a template file
              supports::[pymodule, cmake]
"""

# FUNCTIONS AND METHODS:
# ~~~~~~~~~~~~~~~~~~~~~~

def kprint(text, col=Pallet.mochaFG): #custom neko created kolor print function
    factory.text = text
    factory.colour = col
    factory.cinit()
    factory.cprint()
    return

def error(errmsg:str , ercode: str, excode: int): #unified error msg generator
    kprint("PARSE ERROR:", Pallet.catRed)
    kprint("~~~~~~~~~~~~", Pallet.catRed)
    print('')
    kprint(errmsg, Pallet.catOrange)
    kprint("Contact Neko for broken build file support", Pallet.catYellow) #since i expect bob to only be used by me and otherwise its a broken build file from one of my projects
    kprint(f"Err {ercode}", Pallet.catRed)
    exit(excode)

def safe_enc(l: int, c: int, x: str) -> int: #safely increments to the next character (c) on line (l) for the current line aka lexemes (x) errors pn EOL
    if len(x[l]) <= (c+1):
        error(ERR_LOC.msg(0xF6, l, c, x), "0xF6", 6)
        return 127
    else:
        return (c+1)

def p_safe_enc(l: int, c: int, x: str) -> int: #same as safe_enc but errors on a non matched bracket
    if len(x[l]) <= (c+1):
        error(ERR_LOC.msg(0x24, l, c, x), "0x24", 6)
        return 127
    else:
        return (c+1)

def Lexer(lexemes):
    """
    Dear contributor, thanks for taking the time to read this
    amazing method however I should state that when I wrote this
    only God and I knew how this lexer worked, now only God knows it
    Leaving this counter as a warning for the next person who tries
    to improve this routine, 
    TOTAL_HOURS_WASTED= 1;
    """
    tokens = []
    variables = {}
    #lexe each line
    l = 0
    while True:
        #lexe each char
        c = 0
        word = ''
        while True: #second loop is for generating words
            if lexemes[l] == '':
                break
            getC = lexemes[l][c]
            # print(lexemes[l], c, [getC])
            if c == 0:
                if getC not in ('@', '$'):
                    c = 0
                    word = ''
                    break
                else:
                    if len(lexemes[l]) <= 1:
                        break
                    c += 1
                    if getC == '$':
                        if " " in lexemes[l]:
                            if not lexemes[l].split(" ", 1)[1].startswith("<"):
                                if '<' in lexemes[l].split(" ", 1)[0]:
                                    error(ERR_LOC.msg(0xF9, l, c, lexemes), "0xF9", 9)
                                error(ERR_LOC.msg(0xFA, l, c, lexemes), "0xFA", 10)
                            split = lexemes[l].split(" ", 1)
                            name = split[0].removeprefix("$")
                            if not '<' in split[1] or not '>' in split[1]:
                                error(ERR_LOC.msg(0xF7, l, c, lexemes, [name]), "0xF7", 7)
                            value = split[1].removeprefix("<").removesuffix(">")
                            variables[name] = value
                            break
                        else:
                            error(ERR_LOC.msg(0xF8, l, c, lexemes), "0xF8", 8)
                    continue

            if word in Tokens.TOKENS and lexemes[l][c] == ' ':
                tok = word
                word = ''
                c = safe_enc(l, c, lexemes)
                getC = lexemes[l][c]
                if getC == '<':
                    c = p_safe_enc(l, c, lexemes)
                    param = ''
                    while True:
                        getC = lexemes[l][c]
                        if getC == '>':
                            break
                        param += getC
                        c = p_safe_enc(l, c, lexemes)

                    if tok == 'buildType':
                        tokens.append(Tokens.BuildType(param, l+1))
                        break

                    elif tok == 'buildSrc':
                        tokens.append(Tokens.BuildSrc(param, l+1))
                        break

                    elif tok == 'testSrc':
                        tokens.append(Tokens.TestSrc(param, l+1))
                        break

                else:
                    error(ERR_LOC.msg(0xF4, l, c, lexemes, [tok]), "0xF4", 4)


            if not getC == " ":
                word += getC
            else:
                error(ERR_LOC.msg(0xF2, l, c, lexemes, [word]), "0xF2", 2)
            
            if word == "BUILD":
                tokens.append(Tokens.BUILD())
                tokens.append('x')
                break
            if word == "TEST":
                tokens.append(Tokens.TEST())
                break

            if len(lexemes[l]) < c+2: #type: ignore
                error(ERR_LOC.msg(0xF5, l, c, lexemes), "0xF5", 5)
            c += 1 #type: ignore

        if len(lexemes) < l+2:
            if not 'x' in tokens:
                error(ERR_LOC.msg(0xF3, l, c, lexemes), "0xF3", 3)
            else:
                u = 0
                for _ in tokens:
                    if _ == 'x':
                        tokens.pop(u)
                    u += 1
                return (tokens, variables)

        l += 1

def refactor(var, tok, vli):
    if var.startswith('$'):
        if not ' ' in var:
            varname = var.removeprefix('$')
            if varname in vli:
                return vli[varname]
            else:
                error(ERR_LOC.msg(0xFC, 0, 0, "", [varname, tok.line]), "0xFC", 12)
        else:
            error(ERR_LOC.msg(0xFD, 0, 0, "", [tok.line]), "0xFD", 13)
    else:
        return var

def runScript():
    script = nm.read('./bob.build')
    lexemes = script.split("\n")
    tokens, vars = Lexer(lexemes)
    build = "NONE"
    data = { 'src' : 'NONE', 'test' : 'NONE' }
    for token in tokens:
        if getattr(token, 'run', 'NI') == 'NI':
            if token.__repr__() == 'BUILDTYPE':
                build = token.data
                build = refactor(build, token, vars)
                if not build in BuildTypes.blist:
                    error(ERR_LOC.msg(0xFE, 0, 0, "", [str(build), token.line]), "0xFE", 14)
            elif token.__repr__() == 'BUILDSRC':
                data['src'] = token.data
                data['src'] = refactor(data['src'], token, vars) #type: ignore
                if not exists(data["src"]): #type: ignore
                    error(ERR_LOC.msg(0xD1, 0, 0, "", [str(data["src"]), token.line]), "0xD1", 15)
            elif token.__repr__() == 'TESTSRC':
                data['test'] = token.data
                data['test'] = refactor(data['test'], token, vars) #type: ignore
                if not exists(data["test"]): #type: ignore
                    error(ERR_LOC.msg(0xD2, 0, 0, "", [str(data["test"]), token.line]), "0xD2", 16)

            else:
                error(ERR_LOC.msg(0xFB, 0, 0, ""), "0xFB", 11)

        else:
            if token.__repr__() == "@BUILD":
                if build == 'NONE':
                    error(ERR_LOC.msg(0xD3, 0, 0, ""), "0xD3", 17)
                if data["src"] == 'NONE':
                    error(ERR_LOC.msg(0xD4, 0, 0, ""), "0xD4", 18)

            elif token.__repr__() == "@TEST":
                if data["test"] == 'NONE':
                    error(ERR_LOC.msg(0xD5, 0, 0, ""), "0xD5", 19)
                if build == 'NONE':
                    error(ERR_LOC.msg(0xD3, 0, 0, ""), "0xD3", 17)

            token.run(build, data)

def templateBuilder(temptype):
    if temptype == Templates.PYMODULE:
        pyTemplateBuilder()

def mainProc():
    kprint(nm.figlet("Bob"), Pallet.mochaFG)
    kprint(face, Pallet.smallFG)
    if "-h" in sys.argv or "--help" in sys.argv:
        kprint(help_msg, Pallet.catYellow)

    elif '-t' in sys.argv:
        if not len(sys.argv) == 3:
            kprint("Too many arguments passed", Pallet.catRed)
            kprint("run bob -h for more help", Pallet.catRed)
            exit(1)
        if sys.argv[2] not in Templates.tlist:
            kprint("Invalid template option", Pallet.catRed)
            kprint("run bob -h for more help", Pallet.catRed)
            exit(1)
        templateBuilder(sys.argv[2])

    elif exists("./bob.build"):
        runScript()

    else:
        kprint("No suitable operation found", Pallet.catRed)
        kprint("run bob -h for more help", Pallet.catRed)

if __name__ == "__main__":
    mainProc()
